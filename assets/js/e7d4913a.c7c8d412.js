"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[4778],{3905:function(e,n,t){t.d(n,{Zo:function(){return c},kt:function(){return f}});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function a(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var l=r.createContext({}),u=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},c=function(e){var n=u(e.components);return r.createElement(l.Provider,{value:n},e.children)},m="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,c=a(e,["components","mdxType","originalType","parentName"]),m=u(t),d=o,f=m["".concat(l,".").concat(d)]||m[d]||p[d]||i;return t?r.createElement(f,s(s({ref:n},c),{},{components:t})):r.createElement(f,s({ref:n},c))}));function f(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=t.length,s=new Array(i);s[0]=d;var a={};for(var l in n)hasOwnProperty.call(n,l)&&(a[l]=n[l]);a.originalType=e,a[m]="string"==typeof e?e:o,s[1]=a;for(var u=2;u<i;u++)s[u]=t[u];return r.createElement.apply(null,s)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},5249:function(e,n,t){t.r(n),t.d(n,{assets:function(){return l},contentTitle:function(){return s},default:function(){return p},frontMatter:function(){return i},metadata:function(){return a},toc:function(){return u}});var r=t(3117),o=(t(7294),t(3905));const i={title:"View User Info"},s=void 0,a={unversionedId:"info/user",id:"info/user",title:"View User Info",description:"This command views information about a user, defaulting to the triggering user.",source:"@site/docs/info/user.md",sourceDirName:"info",slug:"/info/user",permalink:"/info/user",draft:!1,editUrl:"https://github.com/yagpdb-cc/yagpdb-cc/edit/master/website/docs/info/user.md",tags:[],version:"current",frontMatter:{title:"View User Info"},sidebar:"sidebar",previous:{title:"View Server Info",permalink:"/info/server"},next:{title:"Overview",permalink:"/leveling/overview"}},l={},u=[{value:"Trigger",id:"trigger",level:2},{value:"Usage",id:"usage",level:2},{value:"Code",id:"code",level:2},{value:"Author",id:"author",level:2}],c={toc:u},m="wrapper";function p(e){let{components:n,...t}=e;return(0,o.kt)(m,(0,r.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"This command views information about a user, defaulting to the triggering user."),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("mdxAdmonitionTitle",{parentName:"admonition"},"Differences between this and ",(0,o.kt)("inlineCode",{parentName:"mdxAdmonitionTitle"},"whois")),(0,o.kt)("p",{parentName:"admonition"},"This command is quite similar to ",(0,o.kt)("inlineCode",{parentName:"p"},"whois")," but also shows the user's role and uses their display colour. Other than that, there's not much of a difference. It's mainly here for consistency with the other informational commands.")),(0,o.kt)("h2",{id:"trigger"},"Trigger"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Type:")," ",(0,o.kt)("inlineCode",{parentName:"p"},"Regex"),(0,o.kt)("br",null),"\n",(0,o.kt)("strong",{parentName:"p"},"Trigger:")," ",(0,o.kt)("inlineCode",{parentName:"p"},"\\A(-|<@!?204255221017214977>\\s*)(user|member)(-?info)?(\\s+|\\z)")),(0,o.kt)("h2",{id:"usage"},"Usage"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"-user")," - Views information about yourself."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"-user <user>")," - Views information about the user provided.")),(0,o.kt)("admonition",{title:"Aliases",type:"tip"},(0,o.kt)("p",{parentName:"admonition"},"Instead of ",(0,o.kt)("inlineCode",{parentName:"p"},"user"),", you can also use ",(0,o.kt)("inlineCode",{parentName:"p"},"member"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"memberinfo"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"member-info"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"userinfo"),", or ",(0,o.kt)("inlineCode",{parentName:"p"},"user-info"),".")),(0,o.kt)("h2",{id:"code"},"Code"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-gotmpl",metastring:"file=../../../src/info/user.go.tmpl",file:"../../../src/info/user.go.tmpl"},'{{/*\n    Views information about a given user / the triggering user.\n    See <https://yagpdb-cc.github.io/info/user> for more information.\n\n    Author: jo3-l <https://github.com/jo3-l>\n*/}}\n\n{{/*\n    Maximum number of roles to show before truncating the rest.\n\n    Suppose each role contributes ~30 characters. 30 roles is then 900 characters,\n    relatively close to the limit of 1024 characters per field value.\n*/}}\n{{ $ROLE_TRUNCATION_THRESHOLD := 30 }}\n\n{{ $member := .Member }}\n{{ $user := .User }}\n{{ $args := parseArgs 0 "**Syntax:** `-userinfo [user]`" (carg "member" "target") }}\n{{ if $args.IsSet 0 }}\n    {{ $member = $args.Get 0 }}\n    {{ $user = $member.User }}\n{{ end }}\n\n{{ $roles := $member.Roles }}\n{{ $rolesPos := cslice }}\n{{ range $roles }}\n    {{- $role := $.Guild.GetRole . }}\n    {{- $rolesPos = $rolesPos.Append (sdict "role" $role "position" $role.Position) }}\n{{ end }}\n\n{{ $rolesSorted := sort $rolesPos (sdict "reverse" true "key" "position") }}\n{{ $omittedCount := 0 }}\n{{ if gt (len $rolesPos) $ROLE_TRUNCATION_THRESHOLD }}\n    {{ $omittedCount = sub (len $rolesPos) $ROLE_TRUNCATION_THRESHOLD }}\n    {{ $rolesSorted = slice $rolesSorted 0 $ROLE_TRUNCATION_THRESHOLD }}\n{{ end }}\n{{ $rolesPos = $rolesSorted }}\n\n{{ $roleMentions := cslice }}\n{{ range $rolesPos }}\n    {{- $roleMentions = $roleMentions.Append (printf "<@&%d>" .role.ID) -}}\n{{ end }}\n{{ $roleMentions = joinStr ", " $roleMentions }}\n{{ if $omittedCount }}\n    {{ $roleMentions = printf "%s [%d roles not shown]" $roleMentions $omittedCount }}\n{{ end }}\n\n{{ $bot := "No" }}\n{{ if $user.Bot }} {{ $bot = "Yes" }} {{ end }}\n{{ $createdAt := snowflakeToTime $user.ID }}\n\n{{ sendMessage nil (cembed\n    "author" (sdict \n        "name" (printf "%s (%d)" $user.String $user.ID) \n        "icon_url" ($user.AvatarURL "256")\n    )\n    "fields" (cslice\n        (sdict "name" "\u276f Created At" "value" (printf "<t:%d:F>" $createdAt.Unix))\n        (sdict "name" "\u276f Joined At" "value" (printf "<t:%d:F>" $member.JoinedAt.Parse.Unix))\n        (sdict "name" "\u276f Names" "value" (printf "Global: %s\\nNick: %s" \n            (or $user.Globalname "*None set*") (or $member.Nick "*None set*")\n        ))\n        (sdict "name" (printf "\u276f Roles (%d Total)" (len $member.Roles)) "value" (or $roleMentions "*No roles*"))\n        (sdict "name" "\u276f Bot" "value" $bot)\n    )\n    "color" 14232643\n    "thumbnail" (sdict "url" ($user.AvatarURL "256"))\n) }}\n')),(0,o.kt)("h2",{id:"author"},"Author"),(0,o.kt)("p",null,"This custom command was written by ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/jo3-l"},"@jo3-l"),"."))}p.isMDXComponent=!0}}]);